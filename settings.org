* Custom variables

#+BEGIN_SRC emacs-lisp
(defvar *emacs-extensions-dir* "C:/emacs-ex")
;; "C:\Program Files (x86)\Steel Bank Common Lisp\1.0.58\sbcl.exe" --core "C:\Program Files (x86)\Steel Bank Common Lisp\1.0.58\sbcl.core"
(defvar *cl-system-location* "C:/Program Files (x86)/Steel Bank Common Lisp/1.0.58/sbcl")
(defvar *python-dir* "c:/Python34")
#+END_SRC

* Get rid of clutter

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

* Setting Emacs extensions path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path *emacs-extensions-dir*)
(add-to-list 'load-path "D:/development/emacs/test/")
(add-to-list 'load-path "D:/software/emacs-packages")
(add-to-list 'load-path "C:/Octave/3.2.4_gcc-4.4.0")
#+END_SRC

* Setting up Python

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat *emacs-extensions-dir* "/python-mode.el-6.0.5"))
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(setq py-shell-name (concat *python-dir* "/python.exe"))
(add-hook 'python-mode-hook
          '(lambda () (setq tab-width 4))
          t)
#+END_SRC

* Setting up SLIME

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat *emacs-extensions-dir* "/slime-latest"))
(require 'slime)
;;(setq inferior-lisp-program *cl-system-location*)
(setq slime-lisp-implementations '((sbcl ("C:/Program Files (x86)/Steel Bank Common Lisp/1.3.1/sbcl.exe" "--core" "C:\\Program Files (x86)\\Steel Bank Common Lisp\\1.3.1\\sbcl.core"))))
(slime-setup '(slime-fancy))
(global-set-key [f12] 'slime)
#+END_SRC

* Setting up IDO

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
#+END_SRC

* Loading personal extensions

#+BEGIN_SRC emacs-lisp
(load "extensions")
#+END_SRC

* Setting up Par Edit

#+BEGIN_SRC emacs-lisp
(require 'paredit)
(autoload 'enable-paredit-mode "paredit" t)
(add-lisp-modes-common-hook (lambda () (paredit-mode 1)))
(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode 1)))
#+END_SRC

* Setting up Octave

#+BEGIN_SRC emacs-lisp
(autoload 'run-octave "octave-inf" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
(add-hook 'octave-mode-hook
	  (lambda ()
	    (abbrev-mode 1)
	    (auto-fill-mode 1)
	    (if (eq window-system 'x)
		(font-lock-mode 1))))
#+END_SRC

* Global keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key [(control a)] 'back-to-indentation)
  (global-set-key [(control tab)] 'hippie-expand)
  (global-set-key (kbd "M-SPC") 'just-one-space-delete-newlines)
  (global-set-key [(control c) (g)] 'magit-status)
  (add-lisp-modes-common-hook (lambda ()
                                (local-set-key [(control c) %] 'raise-sexp)
                                (local-set-key [(control return)] 'mark-up-list)))
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("marmalade" .
               "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

* Options

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines nil)
  (set-default 'truncate-partial-width-windows nil)
  (add-hook 'org-mode-hook
            (lambda () 
              (setq truncate-lines nil)
              (setq truncate-partial-width-windows nil)))
  (column-number-mode t)
  (show-paren-mode 1)
  (setq show-paren-style 'expression)

  (require 'paren)
  (set-face-background 'show-paren-match-face "SlateBlue4")
  (setq split-width-threshold 100)
  (setq kill-whole-line t)
  (customize-set-variable 'indent-tabs-mode nil)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'arjen-grey t)
  (set-face-attribute 'default (selected-frame) :height 120)
#+END_SRC
